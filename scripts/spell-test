#!/usr/bin/php
<?php
include_once 'yaqds-init.php';
include_once 'local/main.class.php';

define('RULE_NPC_STARTENRAGEVALUE',10);
define('RULE_COMBAT_MAXRAMPAGETARGET',3);

$main = new Main(array(
   'debugLevel'     => 0,
   'debugType'      => DEBUG_CLI,
   'errorReporting' => false,
   'sessionStart'   => false,
   'memoryLimit'    => null,
   'sendHeaders'    => false,
   'dbConfigDir'    => APP_CONFIGDIR,
   'fileDefine'     => APP_CONFIGDIR.'/defines.json',
   'database'       => true,
   'input'          => false,
   'html'           => false,
   'adminlte'       => false,
   'data'           => APP_CONFIGDIR.'/global.json',
   'cliLongOpts'    => 'name:,npc,id:',
));

if (!$main->buildClass('format','LWPLib\Format',null,'common/format.class.php')) { exit; }
if (!$main->buildClass('conv','Convert',null,'local/convert.class.php')) { exit; }
if (!$main->buildClass('spell','Spell',null,'local/spell.class.php')) { exit; }

/** @var Convert $conv */
$conv = $main->obj('conv');

/** @var Spell $spell */
$spell = $main->obj('spell');

/** @var LWPLib\Format $format */
$format = $main->obj('format');

/** @var LWPLib\Options $opts */
$opts = $main->obj('options');

$name     = $opts->getOption('name');
$id       = $opts->getOption('id');
$npcSpell = $opts->ifOptionSet('npc',1,0);

$maxServerLevel = 65;
$tickInSecs     = 6;

$splurtVals = [
   '107' => 1,
   '108' => 2,
   '120' => 5,
   '122' => 12,
];

if ($name) {
   $statement = 'SELECT * FROM spells_new WHERE name = ? and not_player_spell = ?';
   $types     = 'si';
   $data      = [$name,$npcSpell];
}
else if ($id) {
   $statement = 'SELECT * FROM spells_new WHERE id = ? and not_player_spell = ?';
   $types     = 'ii';
   $data      = [$id,$npcSpell];
}
else {
   $statement = 'SELECT * FROM spells_new WHERE not_player_spell = ?';
   $types     = 'i';
   $data      = [$npcSpell];
}

$spellInfo = $main->db()->bindQuery($statement,$types,$data);

$classList = [];
$missing   = [];

foreach ($spellInfo as $spellId => $spellData) {
   $spellName  = $spellData['name'];
   $effectList = $conv->convertSpellEffectList($spellData);
   $classList  = $conv->convertSpellClasses($spellData);

   $spellData['targetTypeName'] = $conv->convertSpellTargetType($spellData['targettype']);

   if (!$classList) { $classList = ['None' => 0]; } //printf("\n*** Spell: %s (%d), This spell had no classes assigned.\n\n",$spellName,$spellId); continue; }

   $minLevel = min($classList);
   $maxLevel = null;

   $buffFormula   = $spellData['buffdurationformula'];
   $buffDuration  = $spellData['buffduration'];
   $manaCost      = $spellData['mana'];
   $targetType    = $spellData['targettype'];
   $resistType    = $spellData['resisttype'];
   $resistDiff    = $spellData['ResistDiff'];
   $castTime      = $format->formatDurationShort($spellData['cast_time'] / 1000,['fractional' => true]);
   $recoveryTime  = $format->formatDurationShort($spellData['recovery_time'] / 1000,['fractional' => true]);
   $recastTime    = $format->formatDurationShort($spellData['recast_time'] / 1000,['fractional' => true]);
   
   $minDuration  = null;
   $maxDuration  = null;
   $hasDuration  = ($buffFormula == 0 && $buffDuration == 0) ? false : true;
   $effectValues = [];

   $spell->property('buffduration',$buffDuration);
   $spell->property('buffdurationformula',$buffFormula);

   // Process duration of spell
   if (!$hasDuration) { $duration = 'Instant'; }
   else {
      $minDuration      = $spell->calculateBuffDurationFormula($minLevel,$buffFormula,$buffDuration);
      $maxDuration      = null;
      $maxDurationLevel = $minLevel;

      for ($checkLevel = $maxServerLevel; $checkLevel >= $minLevel; $checkLevel--) {
         $checkDuration = $spell->calculateBuffDurationFormula($checkLevel,$buffFormula,$buffDuration);
         if ($maxDuration && $maxDuration != $checkDuration) { break; }
         $maxDuration      = $checkDuration;
         $maxDurationLevel = $checkLevel;
      }
      
      $duration = ($minDuration == $maxDuration) ? 
         (($minDuration == 0) ? 'Instant' :sprintf("%d ticks (%s)",$minDuration,$format->formatDurationShort($minDuration*$tickInSecs))) :
            sprintf("%s ticks [%s] (L%d) to %s ticks [%s] (L%d)",
               $minDuration,$format->formatDurationShort($minDuration*$tickInSecs),$minLevel,
               $maxDuration,$format->formatDurationShort($maxDuration*$tickInSecs),$maxDurationLevel,
            );
   }

   $spellData['hasDuration'] = $hasDuration;
   $spellData['minDuration'] = $minDuration;
   $spellData['maxDuration'] = $maxDuration;

   // Process levels for effect data
   foreach ($effectList as $effectPos => $effectInfo) {
      $effectId       = $effectInfo['id'];
      $effectFormula  = $effectInfo['formula'];
      $effectBase     = $effectInfo['base'];
      $effectMax      = $effectInfo['max'];
      $minValue       = $spell->calculateEffectValueFormula($effectFormula,$effectBase,$effectMax,$minLevel,$maxDuration);  
      $maxValue       = $spell->calculateEffectValueFormula($effectFormula,$effectBase,$effectMax,$maxServerLevel,1);

      $effectInfo['splurtVal'] = $splurtVals[$effectFormula] ?: null;
      $effectInfo['minValue']  = $minValue;
      $effectInfo['maxValue']  = $maxValue;

      //for ($checkLevel = $minLevel; $checkLevel <= $maxServerLevel; $checkLevel++) {
      //   $checkValue = $spell->calculateEffectValueFormula($effectFormula,$effectBase,$effectMax,$checkLevel);
      //   if (($checkValue > 0 && $checkValue >= $maxValue) || ($checkValue < 0 && $checkValue <= $maxValue)) { $maxLevel = $checkLevel; break; }
      //}

      for ($checkLevel = $maxServerLevel; $checkLevel >= $minLevel; $checkLevel--) {
         $checkValue = $spell->calculateEffectValueFormula($effectFormula,$effectBase,$effectMax,$checkLevel);
         if ($maxValue && $maxValue != $checkValue) { break; }
         $maxLevel = $checkLevel;
      }

      $effectInfo['minLevel'] = $minLevel;
      $effectInfo['maxLevel'] = $maxLevel;

      $effectValues[$effectPos] = $effectInfo;
   }

   $effectDescList = [];
   foreach ($effectValues as $effectPos => $effectInfo) { 
      $effectDescList[$effectPos] = displayFormattedSpellText($main,$spellData,$effectInfo);
   }

   printf("\nSpell: %s (%d), minCastingLevel(%d) buffFormula(%s) buffDuration(%s)\n",$spellName,$spellId,$minLevel,$buffFormula,$buffDuration);
   printf("  Mana.......: %s\n",$manaCost);
   printf("  Cast Time..: %s (recovery:%s, recast:%s)\n",$castTime,$recoveryTime,$recastTime);
   printf("  Duration...: %s\n",$duration);
   printf("  Target.....: %s\n",$conv->convertSpellTargetType($targetType));
   printf("  Resist.....: %s (%s)\n",$conv->convertResistType($resistType),$resistDiff);
   printf("  Classes....: %s\n",str_replace('"','',json_encode($classList)));
   printf("\n");
   foreach ($effectDescList as $effectPos => $effectDesc) { printf("  * %s\n",$effectDesc); }
   printf("\n");
}

if (!$name) { print "\n".json_encode($missing,JSON_PRETTY_PRINT)."\n\n"; }

function displayFormattedSpellText($main, $spellData, $effectInfo) 
{
   global $missing;

   $conv   = $main->obj('conv');
   $format = $main->obj('format');
   $data   = $main->data;

   $availClasses = [
      'data' => $data,
      'conv' => $conv,
      'raw'  => true,       
   ];

   $spellId = $spellData['id'];

   $hasDuration = $spellData['hasDuration'];

   $effectId       = $effectInfo['id'];
   $minValue       = $effectInfo['minValue'];
   $maxValue       = $effectInfo['maxValue'];
   $minLevel       = $effectInfo['minLevel'];
   $maxLevel       = $effectInfo['maxLevel'];
   $splurtVal      = $effectInfo['splurtVal'];
   $effectDisplay  = $effectInfo['effectExceptions'][$spellId] ?: $effectInfo['effectDisplay'];
   $effectName     = $effectInfo['effectName'];
   $textFormat     = $effectDisplay['format'] ?: 0;
   $textLabel      = $effectDisplay['label'];
   $textValues     = $effectDisplay['values'] ?: [];
   $allowDuration  = $effectDisplay['allowDuration'] ? true : false;
   $reverseAdjust  = $effectDisplay['reverseAdjust'] ? true : false;

   foreach ($spellData as $spellDataKey => $spellDataValue) {
      $values[sprintf("spell:%s",$spellDataKey)] = $spellDataValue;
   }

   $values = array_merge($values,[
      'effect:id'        => $effectId,
      'effect:label'     => $textLabel,
      'effect:formula'   => $effectInfo['formula'],
      'effect:base'      => $effectInfo['base'],
      'effect:max'       => $effectInfo['max'],
      'effect:limit'     => $effectInfo['limit'],
      'effect:minLevel'  => $minLevel,
      'effect:maxLevel'  => $maxLevel,
      'effect:splurtVal' => $splurtVal,
      'effect:units'     => '',
   ]);

   $adjustPos = ($reverseAdjust) ? 'Decrease' : 'Increase';
   $adjustNeg = ($reverseAdjust) ? 'Increase' : 'Decrease';

   $values['effect:adjust']   = ($minValue < 0) ? $adjustNeg : $adjustPos; 
   $values['effect:minValue'] = abs($minValue); 
   $values['effect:maxValue'] = ($minValue > 0 && $maxValue <= 0) ? $maxValue : abs($maxValue); 

   if ($splurtVal) { $values['effect:splurtLabel'] = ($minValue > 0 && $minValue > $maxValue) ? 'subtract' : 'add'; }

   foreach ($textValues as $valueKey => $valueString) {
      //print "processing: $valueString\n";
      list($valueClass,$valueFunction,$valueParams,$valueIndex) = explode('^',replaceValues($valueString,$values));
      //print "processed: $valueClass,$valueFunction,$valueParams,$valueIndex\n";

      if (!isset($availClasses[$valueClass])) { continue; }

      if ($valueClass == 'raw') { $callValue = $valueFunction; }
      else {
         $callResult = call_user_func_array([$availClasses[$valueClass],$valueFunction],explode(',',$valueParams));
         $callValue  = (($valueIndex) ? $callResult[$valueIndex] : $callResult) ?: 'Unknown';
      }

      $values[$valueKey] = $callValue;
   }

   $effectFormat = '';
   //$effectFormat = "i:{{effect:id}} f:{{effect:formula}} b:{{effect:base}} m:{{effect:max}} l:{{effect:limit}}: ";

   switch ($textFormat) {
      // Generic effect with min/max, optionally over time, optional qualifier (such as % or units) - accounts for splurt decay/cumulative
      case 1: {
         $effectFormat .= "{{effect:adjust}} {{effect:label}} by {{effect:minValue}}{{effect:units}}";

         if ($minValue != $maxValue) { 
            if ($splurtVal) { $effectFormat .= " and {{effect:splurtLabel}} {{effect:splurtVal}} per tick, ending at {{effect:maxValue}}"; }
            else            { $effectFormat .= " (L{{effect:minLevel}}) to {{effect:maxValue}}{{effect:units}} (L{{effect:maxLevel}})"; }
         }
         if ($hasDuration && $allowDuration) { $effectFormat .= ' per tick'; }

         break;
      }
      // ArmorClass
      case 2: {
         $acModifier             = (1000 / 847);
         $minClientClothValue    = floor(floor($minValue / 3) * $acModifier);
         $minClientNonClothValue = floor(floor($minValue / 4) * $acModifier);
         $maxClientClothValue    = floor(floor($maxValue / 3) * $acModifier);
         $maxClientNonClothValue = floor(floor($maxValue / 4) * $acModifier);

         $values['effect:minClientClothValue']    = $minClientClothValue;
         $values['effect:minClientNonClothValue'] = $minClientNonClothValue;
         $values['effect:maxClientClothValue']    = $maxClientClothValue;
         $values['effect:maxClientNonClothValue'] = $maxClientNonClothValue;
      
         $formats = [
            'silk'    => "Cloth Casters by {{effect:minClientClothValue}}",
            'nonsilk' => "Everyone Else by {{effect:minClientNonClothValue}}",
         ];

         if ($minClientClothValue != $maxClientClothValue)       { $formats['silk']    .= " (L{{effect:minLevel}}) to {{effect:maxClientClothValue}} (L{{effect:maxLevel}})"; }
         if ($minClientNonClothValue != $maxClientNonClothValue) { $formats['nonsilk'] .= " (L{{effect:minLevel}}) to {{effect:maxClientNonClothValue}} (L{{effect:maxLevel}})"; }

         if ($hasDuration && $allowDuration) { 
            foreach (array_keys($formats) as $formatType) { $formats[$formatType] .= ' per tick'; }
         }

         $effectFormat .= "{{effect:adjust}} {{effect:label}} for ".implode(', ',$formats);

         break;
      }
      // Generic up to max
      case 3: {
         $effectFormat .= "{{effect:label}} up to {{effect:max}}";
         break;
      }
      // Generic percentage
      case 4: {
         $effectFormat .= "{{effect:label}} ({{effect:maxValue}}%)";
         break;
      }
      // Teleportation
      case 5: {
         $effectFormat .= "{{spell:targetName}}{{effect:label}} to {{spell:zoneName}} ({{spell:effect_base_value1}},{{spell:effect_base_value2}},{{spell:effect_base_value3}})";
         $targetType   = $conv->convertSpellTargetType($spellData['targettype']);

         $zoneInfo                   = $data->getZoneInfoByName($spellData['teleport_zone']);
         $values['spell:zoneName']   = $zoneInfo['long_name'] ?: 'Unknown Zone';
         $values['spell:targetName'] = ($targetType == 'GroupTeleport') ? 'Group ' : (($targetType == 'Self') ? 'Self ' : ''); 
         break;
      }
      // Aggro/Assist Radius
      case 6: {
         // Harmony uses a special flag to prevent level restrictions
         $ruleResults     = $data->getRuleInfoByName('AlKabor:EnableLatePlanesHarmonyNerf');
         $isHarmonyNerfed = ($ruleResults['rule_value'] == 'false') ? false : true;
         $isHarmony       = ($spellData['name'] == 'Harmony') ? true : false;

         $effectFormat .= "Change {{effect:label}} to {{effect:base}}";

         if ($effectInfo['max'] > 0 && (!$isHarmony || ($isHarmony && $isHarmonyNerfed))) { $effectFormat .= " up to L{{effect:max}}"; }

         break;
      }
      // Adjust percent by skill
      case 7: {
         $values['effect:skill'] = ($values['effect:limit'] == -1) ? 'All Skills' : $conv->convertSkill($values['effect:limit']); 

         $effectFormat .= "{{effect:adjust}} {{effect:label}} by {{effect:minValue}}% for {{effect:skill}}";

         break;
      }
      // Effects that can cause or remove impact, such as Blindness
      case 8: {
         $beneficial = ($spellData['goodEffect'] || in_array($conv->convertSpellTargetType($spellData['targettype']),['GroupV1','GroupTeleport','GroupV2','BardAE'])) ? true : false;

         $values['effect:adjust'] = ($beneficial) ? 'Remove ' : '';

         $effectFormat .= "{{effect:adjust}}{{effect:label}} (Strength: {{strength}})";

         break;
      }
      // Effects with duration optionally up to a certian level
      case 9: {
         $maxLevel           = $values['effect:max'] ?: null;
         $values['duration'] = $format->formatDuration($values['effect:base']/1000);

         $effectFormat .= "{{effect:label}} ({{duration}})";

         if ($maxLevel) { $effectFormat .= " up to L$maxLevel"; }

         break;
      }
      // Generic up to max level
      case 10: {
         if ($effectName == 'SE_Fear' && $values['effect:max'] == 0) { $values['effect:max'] = 52; }

         $effectFormat .= "{{effect:label}} up to L{{effect:max}}";

         break;
      }
      // Summoned Pets
      case 11: {
         $petInfo = $data->getPetInfoBySpellId($spellId);

         foreach ($petInfo as $petKey => $petValue) { $values["pet:$petKey"] = $petValue; }

         $effectFormat .= "{{effect:label}}: L{{pet:level}} {{pet:name}}";

         break;
      }
      // Custom format or generic label only
      default: $effectFormat .= ($textFormat) ? $textFormat : "{{effect:label}}";
   }
   
   $effectFormat = replaceValues($effectFormat,$values);

   if (!$effectFormat) { $effectFormat = "Missing effectID: $effectId"; $missing[$effectId][$spellData['name']]++; }

   return $effectFormat;
}

function replaceValues($string, $values)
{
   if (!is_null($values) && is_array($values)) {
      $replace = array();
      foreach ($values as $key => $value) { $replace['{{'.$key.'}}'] = ((is_array($value)) ? implode('|',array_filter(array_unique($value))) : ((is_bool($value)) ? json_encode($value) : $value)); }

      $string = str_replace(array_keys($replace),array_values($replace),$string);
   }

   return $string;
}
?>
