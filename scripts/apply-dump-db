#!/usr/bin/php
<?php
include_once 'yaqds-init.php';
include_once 'local/main.class.php';

$main = new Main(array(
   'debugLevel'     => 0,
   'debugType'      => DEBUG_CLI,
   'errorReporting' => false,
   'sessionStart'   => false,
   'memoryLimit'    => null,
   'sendHeaders'    => false,
   'dbConfigDir'    => APP_CONFIGDIR,
   'fileDefine'     => APP_CONFIGDIR.'/defines.json',
   'database'       => false,
   'input'          => false,
   'html'           => false,
   'adminlte'       => false,
   'data'           => APP_CONFIGDIR.'/global.json',
));

$main->connectDatabase('db.takpmerge.conf','takpmerge');

$db = $main->db('takpmerge');

$opts = getopt(null,array('diff:','exec','remove','add','change','all','debug'));

$diff      = $opts['diff'] ?: '20240717-20240828';
$diffDates = preg_replace('/\-/','.',$diff);

$fileName = APP_CONFIGDIR."/database/changes/diffs/takp.diff.$diffDates.json";
$data     = json_decode(file_get_contents($fileName),true);

if (!$data) {
   print "\nNo data for ($diff) $fileName\n";
   exit;
}

$keys     = $data['tableInfo']['keys'];
$columns  = $data['tableInfo']['columns'];
$sqlFile  = APP_BASEDIR.'/scripts/data/apply.sql';
$execSql  = (isset($opts['exec'])) ? true : false;
$doRemove = (isset($opts['remove'])) ? true : false;
$doAdd    = (isset($opts['add'])) ? true : false;
$doChange = (isset($opts['change'])) ? true : false;
$debugOn  = (isset($opts['debug'])) ? true : false;

if (isset($opts['all'])) {
   $doRemove = true;
   $doAdd    = true;
   $doChange = true;
}

$skipTables = [
   "spawn_events",
   "spawn_condition_values",
];

$skipRows = [
   "lootdrop_entries" => [
      //"108440^5664",          // Jade Reaver
   ],
   "npc_faction_entries" => [
      //"456^307",
      //"493^307",
   ],
];

$changeLimit = 0;
$stats       = [];
$sqlData     = [];
$output      = [];

if ($doRemove) {
   foreach ($data['analysis']['removed'] as $tableName => $tableChanges) {
      if (in_array($tableName,$skipTables)) { continue; }

      $indexKeys = $keys[$tableName];

      if (!$indexKeys) {
         $output[] = "[NO INDEX KEYS] $tableName";
         exit;
      }

      foreach ($tableChanges as $tableKey => $tableChangeItems) {
         // Build the where condition from the table primary keys and the key value for this row
         $whereCond = [];
         $whereFields = array_combine($indexKeys,explode('^',$tableKey));
         foreach ($whereFields as $fieldName => $fieldValue) {
            $whereCond[] = "`$fieldName` = ".((preg_match('/(?:float|int)$/',$columns[$tableName][$fieldName])) ? $fieldValue : "\"$fieldValue\"");
         }

         if (empty($whereCond)) { 
            $output[] = "[NO WHERE CONDITION] (removed) $tableName / $tableKey / ".json_encode($indexKeys);
            continue; 
         }

         $stats['removed'][$tableName]++;
         $stats['table'][$tableName]++;

         //$comment = sprintf("/* %s(%s) = %s */",$tableChangeItems['objectKey'],$tableChangeItems['objectValue'],$tableChangeItems['objectInfo']);
         $delete  = sprintf("DELETE FROM $tableName WHERE %s",implode(' AND ', $whereCond));

         if ($debugOn) { $output[] = "[DEBUG] (removed) $delete"; }

         //$sqlData[] = $comment;
         $sqlData[] = $delete.';';

         if ($execSql) {
            $result = $db->execute($delete);
            list($dbErrno,$dbError) = $db->lastError();

            $output[] = "[UPDATE] (removed) (".(($result) ? "true" : "false").") $delete";

            if ($result === false) {
               $output[] = "[SQL UPDATE ERROR] (removed) $tableName / $tableKey / $delete / ($dbError)";
               continue;
            }

            $output[] = "[SUCCESS] (removed) $tableName / $tableKey";

            $stats['success']++;

            if ($changeLimit && $stats['success'] >= $changeLimit) { break 2; }
         }
      }
   }
}

if ($doAdd) {
   foreach ($data['analysis']['added'] as $tableName => $tableChangeItems) {
      if (in_array($tableName,$skipTables)) { continue; }

      $columnList = $columns[$tableName];
      
      foreach ($tableChangeItems as $tableKey => $tableItems) {
         $tableItemData = $tableItems['objectData'];
         $valuesFields  = [];
         $valuesInsert  = [];
         $insertList    = array_intersect_key($tableItemData,$columnList);

         foreach ($insertList as $fieldName => $fieldValue) {
            $valuesFields[] = (is_null($fieldValue)) ? 'NULL' : ((preg_match('/(?:float|int)$/',$columns[$tableName][$fieldName])) ? $fieldValue : "\"$fieldValue\"");
            $valuesInsert[] = "`$fieldName`";
         }

         if (empty($valuesFields)) { 
            $output[] = "[NO VALUE FIELDS] (added) $tableName / $tableKey / ".json_encode($tableItemData);
            $stats['malformed'][$tableName]++;
            continue; 
         }

         $stats['added'][$tableName]++;
         $stats['table'][$tableName]++;

         //$comment = sprintf("/* %s(%s) = %s */",$tableItems['objectKey'],$tableItems['objectValue'],$tableItems['objectInfo']);
         $insert  = sprintf("INSERT INTO $tableName (%s) VALUES (%s)",implode(', ',$valuesInsert),implode(', ',$valuesFields));

         if ($debugOn) { $output[] = "[DEBUG] (added) $insert"; }

         //$sqlData[] = $comment;
         $sqlData[] = $insert.';';

         if ($execSql) {
            $result = $db->execute($insert);
            list($dbErrno,$dbError) = $db->lastError();

            $output[] = "[INSERT] (added) (".(($result) ? "true" : "false").") $insert";

            if ($result === false) {
               $output[] = "[SQL UPDATE ERROR] (added) $tableName / $tableKey / $insert / ($dbError)";
               $stats['error'][$tableName]++;
               continue;
            }

            $output[] = "[SUCCESS] (added) $tableName / $tableKey";

            $stats['success']++;

            if ($changeLimit && $stats['success'] >= $changeLimit) { break 2; }
         }
      }
   }
}

if ($doChange) {
   foreach ($data['analysis']['changed'] as $tableName => $tableChanges) {
      if (in_array($tableName,$skipTables)) { 
         $output[] = "[SKIPPED TABLE] (changed) $tableName";
         continue; 
      }
      
      $indexKeys = $keys[$tableName];

      $stats['diff'][$tableName] = 0;

      foreach ($tableChanges as $tableKey => $tableChangeItems) {
         if (in_array($tableKey,$skipRows[$tableName] ?: [])) { 
            $output[] = "[SKIPPED ROW] (changed) $tableName / $tableKey";
            continue; 
         }
         // Construct the values to set from the after object
         $setFields = [];
         $getFields = [];
         foreach ($tableChangeItems['after'] as $fieldName => $fieldValue) {
            $setFields[] = "`$fieldName` = ".((preg_match('/(?:float|int)$/',$columns[$tableName][$fieldName])) ? $fieldValue : "\"$fieldValue\"");
            $getFields[] = "`$fieldName`";
         }

         if (empty($setFields)) { 
            $output[] = "[NO SET FIELDS] (changed) $tableName / $tableKey / ".json_encode($tableChangeItems);
            $stats['malformed'][$tableName]++;
            continue; 
         }

         // Build the where condition from the table primary keys and the key value for this row
         $whereCond = [];
         $whereFields = array_combine($indexKeys,explode('^',$tableKey));
         foreach ($whereFields as $fieldName => $fieldValue) {
            $whereCond[] = "`$fieldName` = ".((preg_match('/(?:float|int)$/',$columns[$tableName][$fieldName])) ? $fieldValue : "\"$fieldValue\"");
         }

         if (empty($whereCond)) { 
            $output[] = "[NO WHERE CONDITION] (changed) $tableName / $tableKey / ".json_encode($indexKeys);
            $stats['malformed'][$tableName]++;
            continue; 
         }

         $stats['changed'][$tableName]++;
         $stats['table'][$tableName]++;

         $comment = sprintf("/* %s(%s) = %s */",$tableChangeItems['objectKey'],$tableChangeItems['objectValue'],$tableChangeItems['objectInfo']);
         $update  = sprintf("UPDATE $tableName SET %s WHERE %s",implode(', ',$setFields),implode(' AND ', $whereCond));

         $sqlData[] = $comment;
         $sqlData[] = $update.';';

         $query   = sprintf("SELECT %s FROM $tableName WHERE %s",implode(', ',$getFields),implode(' AND ', $whereCond));
         $current = $db->query($query,['single' => true]);

         if ($current === false) {
            $output[] = "[SQL SELECT ERROR] (changed) $tableName / $tableKey / $query / (".$db->lastError.")";
            $stats['error'][$tableName]++;
            continue;
         }

         if (is_null($current)) { $current = []; }

         $previous = $tableChangeItems['before'] ?: [];
         $desired  = $tableChangeItems['after'];
         $diff     = array_diff($current,$previous);  // Compare us to the previous TAKP (useful when we are not caught up to it)
         $match    = array_diff($desired,$current);

         if (empty($match)) { 
            $output[] = "[ALREADY MATCHES] (changed) $tableName / $tableKey / ".json_encode($desired);
            $stats['already-matches'][$tableName]++;
            continue; 
         }

         /*
         if (empty($diff)) { continue; }

         if (count($current) == 2 && $current['min_expansion'] == -1 && $current['max_expansion'] == -1 && empty($previous)) { continue; }

         if (count($diff) == 2 && isset($diff['min_expansion']) && isset($diff['max_expansion'])) { continue; }

         if (count($diff) == 1 && isset($diff['expansion'])) { continue; }

         if (count($diff) == 1 && isset($diff['content_flags'])) { continue; }
         */

         $stats['diff'][$tableName]++;

         if ($debugOn) { $output[] = "[DEBUG] (changed) ".json_encode(['tableName' => $tableName, 'tableKey' => $tableKey, 'objectKey' => $tableChangeItems['objectKey'], 'objectValue' => $tableChangeItems['objectValue'], 'objectInfo' => $tableChangeItems['objectInfo'], 'current' => $current, 'previous' => $previous, 'desired' => $desired, 'diff' => $diff, 'changes' => $match],JSON_PRETTY_PRINT); }

         if ($execSql) {
            $update = sprintf("UPDATE $tableName SET %s WHERE %s",implode(', ',$setFields),implode(' AND ', $whereCond));
            $result = $db->execute($update);
            list($dbErrno,$dbError) = $db->lastError();

            $output[] = "[UPDATE] (changed) (".(($result) ? "true" : "false").") $update";

            if ($result === false) {
               $output[] = "[SQL UPDATE ERROR] (changed) $tableName / $tableKey / $update / ($dbError)";
               $stats['error'][$tableName]++;
               continue;
            }

            $output[] = "[SUCCESS] (changed) $tableName / $tableKey";

            $stats['success']++;

            if ($changeLimit && $stats['success'] >= $changeLimit) { break 2; }
         }
      }
   }
}

print "\n".implode("\n",$output)."\n";
file_put_contents($sqlFile,implode("\n",$sqlData));

fwrite(STDERR,"\n".json_encode(array_intersect_key($stats,array_flip(['diff','already-matches','error'])),JSON_PRETTY_PRINT)."\n");

ksort($stats['table']);

fwrite(STDERR, sprintf("\n%7s %7s %7s %s\n",'Removed','Added','Changed','Table Name'));
foreach ($stats['table'] as $tableName => $changeCount) {
   $removed = $stats['removed'][$tableName] ?: 0;
   $added   = $stats['added'][$tableName] ?: 0;
   $changed = $stats['changed'][$tableName] ?: 0;

   fwrite(STDERR, sprintf("%7d %7d %7d %s\n",$removed,$added,$changed,$tableName));
}

?>